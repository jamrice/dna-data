"""Change BillRecommendation table to SimilarityScore

Revision ID: 0d70ddbcd808
Revises: 656b41a11374
Create Date: 2025-02-24 21:57:45.221088

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision: str = "0d70ddbcd808"
down_revision: Union[str, None] = "656b41a11374"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the 'role' table already exists before creating it
    # role 테이블이 이미 존재하는지 확인
    result = op.get_bind().execute(text("SHOW TABLES LIKE 'role';"))
    # role 테이블이 없다면 새로 생성
    if not result.fetchone():
        op.create_table(
            "role",  # role 테이블 생성
            sa.Column(
                "id", sa.Integer(), autoincrement=True, nullable=False
            ),  # 자동 증가하는 id 컬럼
            sa.Column(
                "role", sa.String(length=10), nullable=False
            ),  # 역할명을 저장하는 role 컬럼
            sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),  # id를 기본키로 지정
        )
    op.create_table(
        "similarity_scores",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("source_bill_no", sa.String(length=255), nullable=False),
        sa.Column("target_bill_no", sa.String(length=255), nullable=False),
        sa.Column("similarity_score", sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_similarity_scores")),
        sa.UniqueConstraint(
            "source_bill_no", "target_bill_no", name="uq_source_target"
        ),
    )
    op.drop_table("user_interests")
    op.create_table(
        "user_interests",
        sa.Column("interest_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint(
            "interest_id", "user_id", name=op.f("pk_user_interests")
        ),
    )
    op.drop_table("users")
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=True),
        sa.Column("gender", sa.String(length=10), nullable=True),
        sa.Column("address", sa.String(length=255), nullable=True),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=True),
        sa.Column("gender", sa.String(length=10), nullable=True),
        sa.Column("address", sa.String(length=255), nullable=True),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.drop_table("user_interests")
    op.create_table(
        "user_interests",
        sa.Column("interest_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint(
            "interest_id", "user_id", name=op.f("pk_user_interests")
        ),
    )
    op.drop_table("similarity_scores")
    # ### end Alembic commands ###
